#!/usr/bin/env bash
# Deploy / upgrade Redpanda e validar endpoints
set -Eeuo pipefail

RELEASE=redpanda
NS=redpanda
VALUES=redpanda-values.yaml
CHART=redpanda/redpanda
TIMEOUT=600s # Aumentado para dar mais tempo para o deploy

ISSUER=selfsigned          # ClusterIssuer
DOMAIN=redpanda.rd         # host p√∫blico
BROKER_PLAIN=31094         # Porta NodePort para PLAINTEXT (atualizada)
BROKER_TLS=31095           # Porta NodePort para TLS (atualizada)

log(){ printf '\e[32m[INFO]\e[0m  %s\n' "$*"; }
err(){ printf '\e[31m[ERR ]\e[0m  %s\n' "$*"; }
warn(){ printf '\e[33m[WARN]\e[0m %s\n' "$*"; }

rollback(){ helm uninstall "$RELEASE" -n "$NS" || true; kubectl delete ns "$NS" --wait=false || true; }
trap 'err "Falha linha $LINENO"; read -rp "Rollback? [y/N]: " a && [[ $a =~ ^[Yy]$ ]] && rollback' ERR

retry(){ local n=1 max=$1; shift; until "$@"; do (( n++>max )) && return 1; warn "retry $n/$max‚Ä¶"; sleep 10; done; }

### 1 ‚îÄ Pr√©-check Issuer
kubectl get clusterissuer "$ISSUER" >/dev/null || { err "ClusterIssuer $ISSUER n√£o existe"; exit 1; }

### 2 ‚îÄ Helm repo & namespace
helm repo add redpanda https://charts.redpanda.com >/dev/null 2>&1 || true
helm repo update >/dev/null
kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"

### 3 ‚îÄ Install / upgrade
log "Iniciando deploy/upgrade do Redpanda..."
if helm status "$RELEASE" -n "$NS" >/dev/null 2>&1; then
  log "Helm release $RELEASE encontrado, fazendo upgrade..."
  helm upgrade "$RELEASE" "$CHART" -n "$NS" -f "$VALUES" --timeout "$TIMEOUT"
else
  log "Instalando $RELEASE pela primeira vez..."
  helm install "$RELEASE" "$CHART" -n "$NS" -f "$VALUES" --timeout "$TIMEOUT"
fi

### 4 ‚îÄ Wait pods
log "Aguardando pods ficarem prontos..."
retry 20 kubectl -n "$NS" rollout status sts/redpanda
retry 20 kubectl -n "$NS" wait pod -l app.kubernetes.io/name=console --for=condition=ready --timeout="$TIMEOUT"

### 5 ‚îÄ Descobre IP p√∫blico e NodePort
log "Obtendo informa√ß√µes para conex√£o..."
NODE_IP=$(kubectl get node -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
# Descobrir NodePort para broker externo
NODEPORT_BROKER=$(kubectl -n "$NS" get svc "$RELEASE"-external -o jsonpath='{.spec.ports[?(@.name=="kafka-default")].nodePort}')

# Log detalhes do servi√ßo para debug
log "Detalhes do servi√ßo externo:"
kubectl -n "$NS" get svc "$RELEASE"-external -o yaml | grep -A 20 ports:

log "Usando endere√ßo $NODE_IP e NodePort $NODEPORT_BROKER para valida√ß√£o"

### 6 ‚îÄ Verificar Ingress
log "Verificando Ingress do console..."
kubectl -n "$NS" get ingress

### 7 ‚îÄ Valida√ß√µes b√°sicas
# Teste porta NodePort externa com nc padr√£o (sem timeout)
log "Testando conex√£o no NodePort $NODEPORT_BROKER..."
if nc -z -w 5 "$NODE_IP" "$NODEPORT_BROKER" 2>/dev/null; then
  log "‚úÖ Porta $NODEPORT_BROKER est√° respondendo!"
else
  warn "‚ùå Porta $NODEPORT_BROKER n√£o est√° respondendo ainda. Continuando anyway..."
fi

# Teste rpk se instalado
if command -v rpk >/dev/null; then
  log "rpk encontrado, testando conex√£o..."
  
  # Lista todos os secrets dispon√≠veis para debug
  log "Procurando certificados dispon√≠veis:"
  kubectl -n "$NS" get secrets | grep -E 'cert|certificate'
  
  # Verificando diferentes nomes de secrets poss√≠veis
  CERT_SECRETS=("${RELEASE}-external-cert" 
                "${RELEASE}-external-root-certificate"
                "redpanda-external-cert" 
                "redpanda-external-root-certificate")
  
  SECRET_FOUND=false
  for SECRET_NAME in "${CERT_SECRETS[@]}"; do
    if kubectl -n "$NS" get secret "$SECRET_NAME" &>/dev/null; then
      log "Certificado encontrado: $SECRET_NAME"
      kubectl -n "$NS" get secret "$SECRET_NAME" -o jsonpath='{.data.ca\.crt}' 2>/dev/null | base64 -d > /tmp/ca.crt || \
      kubectl -n "$NS" get secret "$SECRET_NAME" -o jsonpath='{.data.tls\.crt}' 2>/dev/null | base64 -d > /tmp/ca.crt
      
      if [ -s /tmp/ca.crt ]; then
        SECRET_FOUND=true
        log "Certificado exportado para /tmp/ca.crt"
        break
      else
        rm -f /tmp/ca.crt
      fi
    fi
  done
  
  if $SECRET_FOUND; then
    if rpk cluster info --brokers "$NODE_IP:$NODEPORT_BROKER" --tls-enabled --tls-truststore /tmp/ca.crt; then
      log "rpk TLS info OK"
    else
      warn "rpk n√£o conseguiu conectar via TLS, tentando sem TLS..."
      if rpk cluster info --brokers "$NODE_IP:$NODEPORT_BROKER"; then
        log "rpk info OK (sem TLS)"
      else
        warn "rpk n√£o conseguiu conectar (pode ignorar em dev)"
      fi
    fi
  else
    warn "Nenhum certificado v√°lido encontrado, tentando conex√£o sem TLS..."
    if rpk cluster info --brokers "$NODE_IP:$NODEPORT_BROKER"; then
      log "rpk info OK (sem TLS)"
    else
      warn "rpk n√£o conseguiu conectar (pode ignorar em dev)"
    fi
  fi
fi

### 8 ‚îÄ Verifica DNS
log "Verificando resolu√ß√£o de DNS para $DOMAIN..."
if ping -c1 "$DOMAIN" &>/dev/null; then
  log "DNS para $DOMAIN est√° OK!"
else
  warn "DNS para $DOMAIN n√£o est√° resolvendo. Verifique sua configura√ß√£o do dnsmasq."
  log "Adicione no /etc/hosts: $NODE_IP $DOMAIN redpanda-0.$DOMAIN"
fi

### 9 ‚îÄ Info final
cat <<EOF

üéâ  Deploy conclu√≠do.

Verifique:
1. Resolu√ß√£o DNS: $DOMAIN deve apontar para $NODE_IP
2. Adicione no /etc/hosts se necess√°rio:
   $NODE_IP  $DOMAIN redpanda-0.$DOMAIN

Endpoints:
Console    ‚Üí http://$DOMAIN
Kafka (NodePort) ‚Üí $NODE_IP:$NODEPORT_BROKER

Para verifica√ß√£o adicional, execute:
kubectl -n $NS get all
kubectl -n $NS get ingress
kubectl -n $NS describe pod -l app.kubernetes.io/name=console
kubectl -n $NS logs -l app.kubernetes.io/name=console

Para conectar ao Kafka:
rpk cluster info --brokers $NODE_IP:$NODEPORT_BROKER
EOF

# Verifica porta do console
log "Tentando executar curl no console para verificar acesso..."
if curl -s -o /dev/null -m 5 -w "%{http_code}" "http://$DOMAIN" 2>/dev/null; then
  log "‚úÖ Console acess√≠vel via http://$DOMAIN"
else
  warn "‚ùå Console n√£o parece estar acess√≠vel. Verifique a configura√ß√£o do Ingress e DNS"
  
  # Informa√ß√µes adicionais sobre o ingress
  log "Detalhes do ingress:"
  kubectl -n "$NS" describe ingress
  
  # Obter o IP do Ingress e sugerir um acesso alternativo
  INGRESS_IP=$(kubectl -n "$NS" get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
  if [ -n "$INGRESS_IP" ]; then
    log "Tente acessar o console atrav√©s do IP do Ingress: http://$INGRESS_IP"
  fi
fi