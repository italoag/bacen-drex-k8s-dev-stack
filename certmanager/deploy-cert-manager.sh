#!/usr/bin/env bash
# Deploy / upgrade cert-manager no ambiente Kubernetes para gerenciamento de certificados TLS
set -Eeuo pipefail

# --- Configura√ß√µes Globais ---
readonly NS="cert-manager"              # Namespace a usar / criar
readonly RELEASE="cert-manager"         # Nome do Helm release
readonly CHART="jetstack/cert-manager"  # Chart do cert-manager
readonly CHART_VERSION="v1.17.1"        # Vers√£o do chart
readonly TIMEOUT="600s"                 # Timeout para opera√ß√µes
readonly EMAIL=${EMAIL:-"admin@example.com"} # Email para Let's Encrypt (substituir se definido)
readonly LETSENCRYPT_URL="https://acme-v02.api.letsencrypt.org/directory"
readonly TEMP_CERT_DIR="/tmp/certs"
readonly CERT_SECRET_NAME="corporate-ca-certs"
readonly SKIP_CERT_CHECK=${SKIP_CERT_CHECK:-"false"} # Define como "true" para pular verifica√ß√£o de certificados corporativos
readonly FORCE_REINSTALL=${FORCE_REINSTALL:-"false"} # Define como "true" para for√ßar reinstala√ß√£o completa

# --- Fun√ß√µes de Log ---
info()  { printf '\e[32m[INFO]\e[0m  %s\n' "$*" >&2; }
warn()  { printf '\e[33m[WARN]\e[0m %s\n' "$*" >&2; }
err()   { printf '\e[31m[ERR ]\e[0m  %s\n' "$*" >&2; }

# --- Tratamento de Erros e Rollback ---
cleanup_and_exit() {
  local line_num=${1:-$LINENO}
  err "‚ùå Ocorreu um erro na linha $line_num"
  
  info "Status atual dos recursos do cert-manager:"
  kubectl get pods,svc -l app.kubernetes.io/instance="$RELEASE" -n "$NS" 2>/dev/null || true
  
  # Verifica logs de pods com problemas para diagn√≥stico
  check_pod_logs
  
  warn "O script falhou. Verifique os logs acima para diagnosticar o problema."
  exit 1
}
trap 'cleanup_and_exit $LINENO' ERR

# --- Fun√ß√µes Utilit√°rias ---
check_command() {
  local missing_cmds=()
  
  for cmd in "$@"; do
    if ! command -v "$cmd" &>/dev/null; then
      missing_cmds+=("$cmd")
    fi
  done
  
  if [[ ${#missing_cmds[@]} -gt 0 ]]; then
    err "Comandos necess√°rios n√£o encontrados: ${missing_cmds[*]}"
    err "Por favor, instale as ferramentas acima e tente novamente."
    return 1
  fi
  
  return 0
}

# Verifica logs de pods em crash para auxiliar no diagn√≥stico
check_pod_logs() {
  info "Verificando logs de pods problem√°ticos..."
  
  # Verifica se o namespace existe antes de tentar obter logs
  if ! kubectl get ns "$NS" &>/dev/null; then
    info "Namespace $NS n√£o existe. N√£o h√° pods para verificar."
    return 0
  fi
  
  # Verifica se existem pods do cert-manager
  if ! kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" --no-headers &>/dev/null; then
    info "N√£o foram encontrados pods do cert-manager no namespace $NS."
    return 0
  fi
  
  # Primeiro vamos verificar se existem pods em CrashLoopBackOff
  local crashloop_pods
  crashloop_pods=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" --no-headers | grep -E 'CrashLoopBackOff|Error|Failed|ImagePullBackOff' | awk '{print $1}' || echo "")
  
  if [[ -n "$crashloop_pods" ]]; then
    warn "Detectados pods em estado de falha (CrashLoopBackOff/Error):"
    echo "$crashloop_pods" | tr ' ' '\n'
    
    # Verifica logs espec√≠ficos para cada pod em falha
    echo "$crashloop_pods" | tr ' ' '\n' | while read -r pod; do
      warn "===== Detalhes do pod em falha: $pod ====="
      
      # Verifica o status do container para entender o tipo de falha
      warn "Estado do container:"
      kubectl get pod -n "$NS" "$pod" -o jsonpath='{.status.containerStatuses[0].state}' | jq . || true
      
      # Verifica √∫ltimos logs
      warn "√öltimos logs do pod $pod:"
      kubectl -n "$NS" logs "$pod" --tail=30 2>&1 || true
      
      # Verifica logs do container anterior (se estiver em crash loop)
      warn "Logs do container anterior (se dispon√≠vel):"
      kubectl -n "$NS" logs "$pod" --previous --tail=20 2>&1 || true
      
      # Verifica erros de certificado nos logs
      warn "Verificando erros de certificado nos logs:"
      kubectl -n "$NS" logs "$pod" 2>&1 | grep -E 'certificate|SSL|x509|TLS|CA' || echo "Nenhum erro de certificado encontrado"
      
      warn "Descri√ß√£o detalhada do pod:"
      kubectl -n "$NS" describe pod "$pod" | grep -A 20 -E 'Events:|State:|Containers:|Last State:' || true
      
      echo "-------------------------------------"
    done
    
    return 1
  fi
  
  # Obt√©m lista de pods que n√£o est√£o em estado "Running" ou n√£o est√£o "Ready"
  local non_ready_pods
  local all_pods
  
  # Obt√©m todos os pods
  all_pods=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" --no-headers -o custom-columns=NAME:.metadata.name 2>/dev/null)
  non_ready_pods=""
  
  # Para cada pod, verifica se est√° em estado n√£o-pronto
  for pod in $all_pods; do
    local pod_status
    local ready_status
    
    pod_status=$(kubectl get pod -n "$NS" "$pod" -o jsonpath='{.status.phase}' 2>/dev/null)
    ready_status=$(kubectl get pod -n "$NS" "$pod" -o jsonpath='{range .status.conditions[?(@.type=="Ready")]}{.status}{end}' 2>/dev/null)
    
    if [[ "$pod_status" != "Running" ]] || [[ "$ready_status" != "True" ]]; then
      non_ready_pods="$non_ready_pods $pod"
    fi
  done
  
  if [[ -n "$non_ready_pods" ]]; then
    for pod in $non_ready_pods; do
      warn "Verificando pod n√£o-pronto: $pod"
      warn "Status do pod:"
      kubectl get pod -n "$NS" "$pod" -o wide
      
      warn "Logs recentes do pod:"
      kubectl -n "$NS" logs "$pod" --tail=20 2>&1 || true
      
      # Verifica se h√° problemas de rede ou certificado
      warn "Verificando problemas de rede ou certificado:"
      kubectl -n "$NS" logs "$pod" 2>&1 | grep -E 'certificate|SSL|x509|TLS|CA|network|connection|timeout|dial' || echo "Nenhum erro √≥bvio encontrado"
      
      # Tamb√©m mostra os eventos relacionados ao pod
      warn "Eventos do pod:"
      kubectl -n "$NS" get events --field-selector involvedObject.name="$pod" --sort-by='.lastTimestamp' 2>&1 || true
    done
  else
    info "Todos os pods est√£o em estado 'Running' e 'Ready'."
  fi
  
  # Verifica se os pods t√™m access ao CA cert bundle
  info "Verificando acesso ao CA cert bundle em um pod..."
  local sample_pod
  sample_pod=$(kubectl get pod -n "$NS" -l app.kubernetes.io/instance="$RELEASE" -o name | head -1)
  
  if [[ -n "$sample_pod" ]]; then
    kubectl -n "$NS" exec $sample_pod -- ls -la /etc/ssl/certs/ | grep -i "ca\|cert" || true
  fi
}

# Verifica se estamos em uma rede corporativa com proxies SSL que interceptam tr√°fego
check_corporate_network() {
  info "Verificando se estamos em uma rede corporativa com intercepta√ß√£o SSL..."
  
  # Cria diret√≥rio tempor√°rio para armazenar certificados
  mkdir -p "$TEMP_CERT_DIR"
  
  # Tenta obter o certificado do servidor Let's Encrypt usando OpenSSL
  info "Recuperando certificado de $LETSENCRYPT_URL"
  local domain
  domain=$(echo "$LETSENCRYPT_URL" | sed -E 's|^https://([^/]+)/.*|\1|')
  info "Dom√≠nio extra√≠do: $domain"
  
  # Tenta diversos m√©todos para obter o certificado
  if ! openssl s_client -showcerts -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | 
       awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/ {print}' > "$TEMP_CERT_DIR/cert_chain.pem"; then
    warn "N√£o foi poss√≠vel conectar a $domain usando OpenSSL. Tentando m√©todo alternativo..."
    
    # M√©todo alternativo usando curl se dispon√≠vel
    if command -v curl &>/dev/null; then
      warn "Tentando obter informa√ß√µes com curl..."
      curl -v --connect-timeout 10 "https://$domain" 2>&1 | grep -i "issuer\|subject\|certificate" >&2
    fi
    
    warn "N√£o foi poss√≠vel obter certificados. Continuando sem verifica√ß√µes adicionais."
    return 1
  fi
  
  # Verifica se conseguimos obter um certificado v√°lido
  if ! openssl x509 -in "$TEMP_CERT_DIR/cert_chain.pem" -noout &>/dev/null; then
    warn "O arquivo obtido n√£o parece ser um certificado X509 v√°lido."
    return 1
  fi
  
  # Obt√©m informa√ß√µes sobre o certificado
  local subject_cn
  local issuer_cn
  local issuer_org
  local is_corporate=false
  
  # Extrai CN do subject e issuer
  subject_cn=$(openssl x509 -in "$TEMP_CERT_DIR/cert_chain.pem" -noout -subject 2>/dev/null | 
               grep -o "CN *= *[^,/\"]*" | sed 's/CN *= *//')
  
  issuer_cn=$(openssl x509 -in "$TEMP_CERT_DIR/cert_chain.pem" -noout -issuer 2>/dev/null | 
              grep -o "CN *= *[^,/\"]*" | sed 's/CN *= *//')
  
  issuer_org=$(openssl x509 -in "$TEMP_CERT_DIR/cert_chain.pem" -noout -issuer 2>/dev/null | 
               grep -o "O *= *[^,/\"]*" | sed 's/O *= *//')
  
  info "Certificado para $domain:"
  info "  Subject: $subject_cn"
  info "  Emissor: $issuer_cn"
  info "  Organiza√ß√£o: $issuer_org"
  
  # L√≥gica de verifica√ß√£o mais abrangente
  # 1. Verifica se o certificado foi emitido por servi√ßos conhecidos
  if echo "$issuer_cn $issuer_org" | grep -i -E '(netskope|zscaler|proxy|gateway|firewall|security|corporate|enterprise|walled garden|forefront|fortinet|checkpoint|palo alto|blue coat|mcafee|sophos|cisco|watchguard)' >/dev/null; then
    info "Detectado certificado de solu√ß√£o de seguran√ßa corporativa: $issuer_cn / $issuer_org"
    is_corporate=true
  # 2. Verifica se o subject cont√©m o dom√≠nio esperado
  elif ! echo "$subject_cn" | grep -i "$domain" >/dev/null; then
    warn "O subject ($subject_cn) n√£o corresponde ao dom√≠nio esperado ($domain)"
    is_corporate=true
  # 3. Verifica se o emissor √© quem deveria ser para Let's Encrypt
  elif ! echo "$issuer_cn $issuer_org" | grep -i -E "(let's encrypt|letsencrypt|isrg|r3|digital signature trust co|internet security research group)" >/dev/null; then
    warn "Emissor ($issuer_cn / $issuer_org) n√£o parece ser da Let's Encrypt"
    is_corporate=true
  fi
  
  # Em redes corporativas, extrai e salva todos os certificados da cadeia
  if [[ "$is_corporate" == "true" ]]; then
    info "üîí Detectada rede corporativa com intercep√ß√£o SSL!"
    extract_corporate_certificates "$domain"
    return 0
  else
    info "‚úÖ Certificado parece ser aut√™ntico do Let's Encrypt. Nenhuma a√ß√£o necess√°ria."
    rm -rf "$TEMP_CERT_DIR"
    return 1
  fi
}

# Extrai certificados corporativos para uso no cluster
extract_corporate_certificates() {
  local domain=$1
  info "Extraindo certificados corporativos para dom√≠nio $domain..."
  
  # Limpa e prepara diret√≥rio
  mkdir -p "$TEMP_CERT_DIR"
  rm -f "$TEMP_CERT_DIR"/*.pem "$TEMP_CERT_DIR"/*.txt
  
  info "Tentando extrair certificados com OpenSSL..."
  
  # Tentativa 1: M√©todo mais completo para obter todos os certificados
  local temp_output="$TEMP_CERT_DIR/openssl_output.txt"
  local timeout_cmd=""
  
  # Verifica se o timeout est√° dispon√≠vel (evita travamentos)
  if command -v timeout &>/dev/null; then
    timeout_cmd="timeout 30"
  fi
  
  # Tenta obter os certificados (com timeout se poss√≠vel)
  if ! $timeout_cmd openssl s_client -showcerts -connect "$domain:443" -servername "$domain" </dev/null >$temp_output 2>&1; then
    warn "Erro ao conectar usando OpenSSL. Verificando conte√∫do obtido mesmo assim..."
  fi
  
  # Verifica se obteve algum erro no conte√∫do
  if grep -q "error\|invalid\|unable\|fail" "$temp_output"; then
    warn "Detectados erros na sa√≠da do OpenSSL:"
    grep -i "error\|invalid\|unable\|fail" "$temp_output"
  fi
  
  # Extrai os certificados usando um m√©todo mais robusto
  local cert_count=0
  local in_cert=false
  local current_cert=""
  
  # Abordagem 1: Processa linha por linha identificando certificados
  while IFS= read -r line || [ -n "$line" ]; do
    # Remove espa√ßos em branco extras no in√≠cio e fim da linha
    line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    
    if [[ "$line" == *"BEGIN CERTIFICATE"* ]]; then
      cert_count=$((cert_count + 1))
      current_cert="$TEMP_CERT_DIR/cert${cert_count}.pem"
      in_cert=true
      echo "-----BEGIN CERTIFICATE-----" > "$current_cert"
    elif [[ "$line" == *"END CERTIFICATE"* ]]; then
      echo "-----END CERTIFICATE-----" >> "$current_cert"
      in_cert=false
      
      # Valida√ß√£o: Verifica se o arquivo criado √© um certificado X509 v√°lido
      if ! openssl x509 -noout -in "$current_cert" &>/dev/null; then
        warn "Certificado inv√°lido detectado: $current_cert"
        rm -f "$current_cert"  # Remove certificado inv√°lido
        cert_count=$((cert_count - 1))
      fi
    elif [[ "$in_cert" == "true" && -n "$line" ]]; then
      # Apenas adiciona linhas n√£o vazias ao certificado
      echo "$line" >> "$current_cert"
    fi
  done < "$temp_output"
  
  # Verifica se conseguimos extrair certificados
  local valid_certs=0
  valid_certs=$(find "$TEMP_CERT_DIR" -name "cert*.pem" -a -size +0 | wc -l | tr -d ' ')
  
  # Se n√£o conseguiu extrair certificados, tenta m√©todos alternativos
  if [[ "$valid_certs" -eq 0 ]]; then
    warn "Nenhum certificado extra√≠do com o primeiro m√©todo. Tentando m√©todos alternativos..."
    
    # M√©todo 2: Abordagem simplificada - extrai qualquer bloco que pare√ßa com certificado
    info "Usando m√©todo alternativo 1 para extra√ß√£o..."
    $timeout_cmd openssl s_client -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | 
      sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "$TEMP_CERT_DIR/cert1.pem"
    
    if ! openssl x509 -noout -in "$TEMP_CERT_DIR/cert1.pem" &>/dev/null; then
      warn "Certificado extra√≠do com m√©todo alternativo 1 √© inv√°lido. Tentando m√©todo 2..."
      
      # M√©todo 3: Usando curl para obter cabe√ßalhos e usar outra estrat√©gia
      if command -v curl &>/dev/null; then
        info "Tentando extrair certificados via curl..."
        curl --insecure -v "https://$domain" >/dev/null 2>"$TEMP_CERT_DIR/curl_output.txt"
        
        # Tenta extrair informa√ß√µes √∫teis para diagn√≥stico
        grep -i "SSL connection\|certificate\|issuer\|subject" "$TEMP_CERT_DIR/curl_output.txt" || true
      fi
      
      # M√©todo 4: Tentativa com flag -CApath
      info "Tentando m√©todo alternativo com CApath..."
      openssl s_client -showcerts -CApath /etc/ssl/certs -connect "$domain:443" </dev/null 2>/dev/null |
        sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "$TEMP_CERT_DIR/cert2.pem"
    fi
    
    # Verifica novamente
    valid_certs=$(find "$TEMP_CERT_DIR" -name "cert*.pem" -a -size +0 | wc -l | tr -d ' ')
  fi
  
  # Valida todos os certificados extra√≠dos
  for cert_file in "$TEMP_CERT_DIR"/cert*.pem; do
    if [[ -f "$cert_file" ]] && [[ -s "$cert_file" ]]; then
      if ! openssl x509 -noout -in "$cert_file" &>/dev/null; then
        warn "Certificado inv√°lido detectado: $cert_file"
        rm -f "$cert_file"
        valid_certs=$((valid_certs - 1))
      fi
    fi
  done
  
  # Contagem final de certificados v√°lidos
  valid_certs=$(find "$TEMP_CERT_DIR" -name "cert*.pem" -a -size +0 | wc -l | tr -d ' ')
  
  if [[ "$valid_certs" -eq 0 ]]; then
    warn "‚ö†Ô∏è N√£o foi poss√≠vel extrair nenhum certificado v√°lido."
    
    # √öltimo recurso: Procurar certificados no sistema
    warn "Procurando certificados CA do sistema como √∫ltimo recurso..."
    if [[ -f "/etc/ssl/certs/ca-certificates.crt" ]]; then
      info "Encontrado arquivo de certificados do sistema. Copiando..."
      cp "/etc/ssl/certs/ca-certificates.crt" "$TEMP_CERT_DIR/system_ca.pem"
      valid_certs=1
    else
      warn "Nenhum certificado CA do sistema encontrado."
      return 1
    fi
  fi
  
  info "‚úÖ Processados $valid_certs certificados v√°lidos."
  
  # Mostra informa√ß√µes sobre os certificados encontrados
  for cert in "$TEMP_CERT_DIR"/*.pem; do
    if [[ -f "$cert" ]] && [[ -s "$cert" ]] && openssl x509 -noout -in "$cert" &>/dev/null; then
      local subject
      local issuer
      local dates
      subject=$(openssl x509 -noout -subject -in "$cert" 2>/dev/null | sed 's/subject=//')
      issuer=$(openssl x509 -noout -issuer -in "$cert" 2>/dev/null | sed 's/issuer=//')
      dates=$(openssl x509 -noout -dates -in "$cert" 2>/dev/null | tr '\n' ' ')
      fingerprint=$(openssl x509 -noout -fingerprint -sha256 -in "$cert" 2>/dev/null | sed 's/SHA256 Fingerprint=//')
      
      info "Certificado $(basename "$cert"):"
      info "  - Subject: $subject"
      info "  - Issuer: $issuer"
      info "  - $dates"
      info "  - Fingerprint: $fingerprint"
    else
      # Se o arquivo existe mas n√£o √© um certificado v√°lido, remove-o
      if [[ -f "$cert" ]]; then
        warn "Removendo arquivo de certificado inv√°lido: $(basename "$cert")"
        rm -f "$cert"
      fi
    fi
  done
  
  return 0
}

# Cria ConfigMap/Secret com certificados corporativos para cert-manager
create_cert_config() {
  info "Criando Secret com certificados CA corporativos para cert-manager..."
  
  # Verifica se o namespace existe (pode ter sido criado na fun√ß√£o setup_environment)
  if ! kubectl get ns "$NS" >/dev/null 2>&1; then
    info "Namespace $NS n√£o existe. Criando..."
    if ! kubectl create ns "$NS"; then
      err "Falha ao criar namespace $NS"
      return 1
    fi
  fi
  
  # Verifica se h√° certificados extra√≠dos
  local cert_count=0
  
  # Primeiro, vamos verificar certificados .pem normais
  if ls "$TEMP_CERT_DIR"/*.pem &>/dev/null; then
    cert_count=$(find "$TEMP_CERT_DIR" -name "*.pem" -a -size +0 | wc -l | tr -d ' ')
  fi
  
  if [[ "$cert_count" -eq 0 ]]; then
    warn "Nenhum certificado .pem encontrado no diret√≥rio $TEMP_CERT_DIR."
    
    # Se temos o certificado do sistema como √∫ltimo recurso, usamos ele
    if [[ -f "/etc/ssl/certs/ca-certificates.crt" ]]; then
      warn "Usando certificados CA do sistema como alternativa..."
      cp "/etc/ssl/certs/ca-certificates.crt" "$TEMP_CERT_DIR/system_ca.pem"
      cert_count=1
    else
      warn "Nenhuma fonte de certificados confi√°veis encontrada."
      return 1
    fi
  fi
  
  info "Encontrados $cert_count arquivos de certificado para processar."
  
  # Valida√ß√£o adicional: garante que todos os certificados s√£o v√°lidos antes de combinar
  local valid_certs=0
  for cert in "$TEMP_CERT_DIR"/*.pem; do
    if [[ -f "$cert" ]] && [[ -s "$cert" ]]; then
      if openssl x509 -noout -in "$cert" &>/dev/null; then
        valid_certs=$((valid_certs + 1))
      else
        warn "Removendo certificado inv√°lido: $cert"
        rm -f "$cert"
      fi
    fi
  done
  
  if [[ "$valid_certs" -eq 0 ]]; then
    err "Nenhum certificado v√°lido encontrado ap√≥s valida√ß√£o."
    return 1
  fi
  
  # Combina todos os certificados em um √∫nico arquivo
  info "Combinando $valid_certs certificados v√°lidos..."
  cat "$TEMP_CERT_DIR"/*.pem > "$TEMP_CERT_DIR/combined.pem"
  
  # Valida√ß√£o final do arquivo combinado
  if ! openssl x509 -noout -in "$TEMP_CERT_DIR/combined.pem" &>/dev/null; then
    err "O arquivo combinado n√£o cont√©m um certificado X509 v√°lido."
    # Tenta diagnosticar o problema
    warn "Conte√∫do do arquivo combinado (primeiras 10 linhas):"
    head -10 "$TEMP_CERT_DIR/combined.pem"
    return 1
  fi
  
  # Cria ou atualiza o secret
  info "Criando/atualizando Secret com os certificados..."
  
  # Verifica se o secret j√° existe
  if kubectl -n "$NS" get secret "$CERT_SECRET_NAME" >/dev/null 2>&1; then
    info "Secret '$CERT_SECRET_NAME' j√° existe. Atualizando..."
    if ! kubectl -n "$NS" create secret generic "$CERT_SECRET_NAME" \
          --from-file=ca.crt="$TEMP_CERT_DIR/combined.pem" \
          --dry-run=client -o yaml | kubectl apply -f -; then
      err "Falha ao atualizar o Secret '$CERT_SECRET_NAME'"
      return 1
    fi
  else
    info "Criando novo Secret '$CERT_SECRET_NAME'..."
    if ! kubectl -n "$NS" create secret generic "$CERT_SECRET_NAME" \
          --from-file=ca.crt="$TEMP_CERT_DIR/combined.pem"; then
      err "Falha ao criar o Secret '$CERT_SECRET_NAME'"
      return 1
    fi
  fi
  
  # Verifica se o secret foi criado corretamente
  if kubectl -n "$NS" get secret "$CERT_SECRET_NAME" >/dev/null 2>&1; then
    info "‚úÖ Secret '$CERT_SECRET_NAME' criado/atualizado com sucesso no namespace $NS"
    return 0
  else
    err "‚ùå Falha ao verificar a exist√™ncia do Secret '$CERT_SECRET_NAME'"
    return 1
  fi
}

retry() {
  local n=1
  local max=$1
  shift
  
  until "$@"; do
    if [[ $n -ge $max ]]; then
      err "Falha ap√≥s $n tentativas."
      return 1
    fi
    warn "Tentativa $n/$max falhou. Tentando novamente em 5 segundos..."
    sleep 5
    n=$((n+1))
  done
}

rollback() {
  warn "Executando rollback..."
  
  if helm status "$RELEASE" -n "$NS" &>/dev/null; then
    warn "Desinstalando release Helm '$RELEASE'..."
    helm uninstall "$RELEASE" -n "$NS" || true
  fi
  
  warn "Removendo CRDs do cert-manager..."
  kubectl delete crd -l app.kubernetes.io/name=cert-manager 2>/dev/null || true
  
  warn "Removendo namespace se vazio..."
  if [[ $(kubectl get all -n "$NS" 2>/dev/null | wc -l) -le 1 ]]; then
    kubectl delete ns "$NS" --wait=false 2>/dev/null || true
  fi
  
  warn "Rollback conclu√≠do."
}

# Limpa recursos problem√°ticos antes de tentar novamente
cleanup_crashing_pods() {
  info "Verificando e removendo pods em CrashLoopBackOff..."
  
  # Verifica se o namespace existe antes de tentar obter pods
  if ! kubectl get ns "$NS" &>/dev/null; then
    info "Namespace $NS n√£o existe. N√£o h√° pods para verificar."
    return 0
  fi
  
  # Verifica se existem pods do cert-manager no namespace
  # Usamos uma abordagem mais segura para consultar pods
  if ! kubectl get pods -n "$NS" &>/dev/null; then
    info "N√£o foi poss√≠vel listar pods no namespace $NS."
    return 0
  fi
  
  # Verifica se h√° algum pod do cert-manager
  local pod_count
  pod_count=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" --no-headers 2>/dev/null | wc -l)
  
  if [[ "$pod_count" -eq 0 ]]; then
    info "N√£o foram encontrados pods do cert-manager no namespace $NS."
    return 0
  fi
  
  # Agora que confirmamos que h√° pods, podemos verificar se algum est√° em CrashLoopBackOff
  # Usamos uma consulta mais segura
  local crash_pods
  crash_pods=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,REASON:.status.containerStatuses[0].state.waiting.reason --no-headers 2>/dev/null | grep -i "CrashLoopBackOff" | awk '{print $1}')
  
  if [[ -n "$crash_pods" ]]; then
    warn "Encontrados pods em CrashLoopBackOff. Tentando remover para nova implanta√ß√£o."
    
    # Tenta deletar os pods com crash para for√ßar recria√ß√£o 
    for pod in $crash_pods; do
      info "Removendo pod com problemas: $pod"
      kubectl delete pod -n "$NS" "$pod" --grace-period=0 --force
    done
    
    # Aguarda um momento para garantir que foram removidos
    sleep 5
  else
    info "Nenhum pod em CrashLoopBackOff encontrado."
  fi
}

wait_for_pods() {
  info "Aguardando os pods do cert-manager ficarem prontos..."
  
  # Primeiro verificamos se o namespace existe
  if ! kubectl get ns "$NS" &>/dev/null; then
    info "Namespace $NS n√£o existe. N√£o h√° pods para verificar."
    return 0
  fi

  # Espera inicial para dar tempo dos pods serem criados
  sleep 10
  
  local max_attempts=30
  local attempt=0
  local all_ready=false
  
  # Componentes esperados e contagem total
  local expected_components=("controller" "webhook" "cainjector")
  local total_expected=${#expected_components[@]}  # Esperamos 3 pods por padr√£o
  
  while [ $attempt -lt $max_attempts ] && [ "$all_ready" != "true" ]; do
    attempt=$((attempt+1))
    info "Verificando status dos pods (tentativa $attempt/$max_attempts)..."
    
    # Verifica se os deployments existem primeiro
    local deployments
    deployments=$(kubectl get deployments -n "$NS" -l app.kubernetes.io/instance="$RELEASE" 2>/dev/null)
    local deployment_count
    deployment_count=$(echo "$deployments" | grep -c "$RELEASE" 2>/dev/null || echo "0")
    
    if [[ "$deployment_count" -eq 0 ]]; then
      warn "Nenhum deployment do cert-manager encontrado. Verificando se o Helm Release existe..."
      if ! helm status "$RELEASE" -n "$NS" &>/dev/null; then
        err "O release do Helm '$RELEASE' n√£o existe no namespace '$NS'."
        warn "A instala√ß√£o pode ter falhado completamente. Verifique os logs do Helm."
        return 1
      fi
      sleep 5
      continue
    fi
    
    # Obt√©m todos os pods no namespace
    local pod_status
    pod_status=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" 2>/dev/null || echo "")
    
    # Verifica pods com problemas - crash loop, init container, etc
    local crashing_pods
    crashing_pods=$(echo "$pod_status" | grep -E 'CrashLoopBackOff|Error|ImagePullBackOff|ErrImagePull' || echo "")
    if [[ -n "$crashing_pods" ]]; then
      err "Detectados pods com problemas:"
      echo "$crashing_pods"
      warn "Verificando logs dos pods com problemas..."
      echo "$crashing_pods" | awk '{print $1}' | while read -r pod; do
        warn "=== Logs do pod $pod ==="
        kubectl logs -n "$NS" "$pod" --tail=50 || true
        warn "=== Descri√ß√£o do pod $pod ==="
        kubectl describe pod -n "$NS" "$pod" | grep -A 10 -E 'Events:|State:|Last State:' || true
      done
      
      # Se ainda estamos nas primeiras tentativas, damos mais tempo
      if [ "$attempt" -lt 10 ]; then
        warn "Aguardando recupera√ß√£o dos pods..."
        sleep 20
        continue
      else
        err "Pods continuam em estado de falha ap√≥s v√°rias tentativas."
        return 1
      fi
    fi
    
    # Verifica quantos pods est√£o prontos vs. total
    local ready_pods
    local total_pods
    
    # Conta total de pods do cert-manager
    total_pods=$(echo "$pod_status" | grep -c "$RELEASE" || echo "0")
    
    if [[ "$total_pods" -eq 0 ]]; then
      warn "Nenhum pod do cert-manager encontrado ainda. Aguardando cria√ß√£o..."
      kubectl get events -n "$NS" --sort-by='.lastTimestamp' | tail -5
      sleep 10
      continue
    fi
    
    # Verifica se todos os componentes esperados est√£o presentes
    local missing_components=()
    for comp in "${expected_components[@]}"; do
      if ! echo "$pod_status" | grep -q "$comp"; then
        missing_components+=("$comp")
      fi
    done
    
    if [[ ${#missing_components[@]} -gt 0 ]]; then
      warn "Componentes ausentes: ${missing_components[*]}"
      warn "Verificando se os deployments est√£o corretos..."
      kubectl get deployments -n "$NS" -l app.kubernetes.io/instance="$RELEASE"
    fi
    
    # Conta pods que est√£o prontos (Running e Ready)
    ready_pods=$(kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE" -o jsonpath='{range .items[*]}{.status.phase}{"\t"}{range .status.conditions[?(@.type=="Ready")]}{.status}{end}{"\n"}{end}' 2>/dev/null | grep -c "Running.*True" || echo "0")
    
    if [[ "$ready_pods" -eq "$total_pods" ]] && [[ "$ready_pods" -ge "$total_expected" ]]; then
      all_ready=true
      info "‚úÖ Todos os pods ($ready_pods/$total_pods) est√£o prontos!"
      break
    else
      info "Pods prontos: $ready_pods/$total_pods (esperamos pelo menos $total_expected)"
      echo "$pod_status"
    fi
    
    # Verifica√ß√µes extras em intervalos espec√≠ficos
    if [ "$attempt" -eq 10 ] || [ "$attempt" -eq 20 ]; then
      warn "Pods est√£o demorando para ficar prontos. Verificando eventos recentes..."
      kubectl get events -n "$NS" --sort-by='.lastTimestamp' | tail -10
      
      warn "Verificando detalhes dos pods pendentes..."
      echo "$pod_status" | grep -v "Running.*1/1" | while read -r line; do
        pod_name=$(echo "$line" | awk '{print $1}')
        kubectl describe pod -n "$NS" "$pod_name" | grep -A 15 -E 'Events:|State:|Last State:|Conditions:' || true
      done
    fi
    
    sleep 15
  done
  
  if [[ "$all_ready" != "true" ]]; then
    if [[ "$total_pods" -eq 0 ]]; then
      err "Nenhum pod do cert-manager foi criado ap√≥s $max_attempts tentativas."
      kubectl describe deployments -n "$NS" -l app.kubernetes.io/instance="$RELEASE"
      return 1
    else
      err "Timeout aguardando pods ficarem prontos ap√≥s $max_attempts tentativas."
      return 1
    fi
  fi
  
  info "‚úÖ Todos os pods do cert-manager est√£o rodando e prontos."
  kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE"
  return 0
}

# --- Fun√ß√µes de Deploy ---
setup_environment() {
  info "Configurando ambiente..."
  
  info "Adicionando reposit√≥rio Helm do jetstack..."
  helm repo add jetstack https://charts.jetstack.io --force-update >/dev/null
  helm repo update >/dev/null
  
  info "Verificando namespace..."
  kubectl get ns "$NS" >/dev/null 2>&1 || kubectl create ns "$NS"
}

install_cert_manager() {
  info "Instalando/atualizando o cert-manager via Helm..."
  
  # Configura valores adicionais para certificados corporativos (verifica flag global)
  local extra_values=""
  local has_corporate_certs=false
  
  # Verifica se o secret existe (foi criado anteriormente na fun√ß√£o create_cert_config)
  if [[ -d "$TEMP_CERT_DIR" ]] && [[ -f "$TEMP_CERT_DIR/combined.pem" ]]; then
    has_corporate_certs=true
    info "Detectado arquivo de certificados corporativos, configurando certificados CA"
  elif kubectl -n "$NS" get secret "$CERT_SECRET_NAME" >/dev/null 2>&1; then
    has_corporate_certs=true
    info "Detectado Secret existente com certificados corporativos, configurando certificados CA"
  fi
  
  # Define os valores para o Helm, independente de ter certificados corporativos ou n√£o
  local base_values=(
    "--set" "installCRDs=true"
  )
  
  # Valores para certificados corporativos
  if [[ "$has_corporate_certs" == "true" ]]; then
    info "Configurando montagem de certificados corporativos..."
    extra_values=(
      # Configura√ß√µes para controller
      "--set" "volumeMounts[0].name=ca-certs"
      "--set" "volumeMounts[0].mountPath=/etc/ssl/certs/ca-certificates.crt"
      "--set" "volumeMounts[0].subPath=ca.crt"
      "--set" "volumes[0].name=ca-certs"
      "--set" "volumes[0].secret.secretName=$CERT_SECRET_NAME"
      # Configura√ß√µes para webhook
      "--set" "webhook.volumeMounts[0].name=ca-certs"
      "--set" "webhook.volumeMounts[0].mountPath=/etc/ssl/certs/ca-certificates.crt"
      "--set" "webhook.volumeMounts[0].subPath=ca.crt"
      "--set" "webhook.volumes[0].name=ca-certs"
      "--set" "webhook.volumes[0].secret.secretName=$CERT_SECRET_NAME"
      # Configura√ß√µes para cainjector
      "--set" "cainjector.volumeMounts[0].name=ca-certs"
      "--set" "cainjector.volumeMounts[0].mountPath=/etc/ssl/certs/ca-certificates.crt"
      "--set" "cainjector.volumeMounts[0].subPath=ca.crt"
      "--set" "cainjector.volumes[0].name=ca-certs"
      "--set" "cainjector.volumes[0].secret.secretName=$CERT_SECRET_NAME"
    )
  else
    extra_values=()
  fi
  
  # Combinando os arrays de valores
  local all_values=("${base_values[@]}" "${extra_values[@]}")
  
  # For√ßa desinstala√ß√£o completa se FORCE_REINSTALL estiver ativado
  if [[ "$FORCE_REINSTALL" == "true" ]] && helm status "$RELEASE" -n "$NS" >/dev/null 2>&1; then
    info "FORCE_REINSTALL ativado. Desinstalando cert-manager existente..."
    helm uninstall "$RELEASE" -n "$NS" || true
    
    # Aguarda um pouco para garantir que tudo foi limpo
    info "Aguardando limpeza completa..."
    sleep 10
    
    # Verifica se CRDs precisam ser removidos manualmente
    kubectl get crd -l app.kubernetes.io/name=cert-manager 2>/dev/null | grep -q "cert-manager" && {
      info "Removendo CRDs do cert-manager manualmente..."
      kubectl delete crd -l app.kubernetes.io/name=cert-manager
      sleep 5
    }
  fi
  
  # Cria arquivo tempor√°rio com valores YAML para evitar problemas de escape na linha de comando
  local values_file
  values_file=$(mktemp -t cert-manager-values-XXXXX.yaml)
  
  cat > "$values_file" <<EOF
# Valores padr√£o
installCRDs: true
EOF

  # Adiciona configura√ß√µes para certificados corporativos se necess√°rio
  if [[ "$has_corporate_certs" == "true" ]]; then
    cat >> "$values_file" <<EOF
# Configura√ß√µes para montar certificados corporativos
volumes:
- name: ca-certs
  secret:
    secretName: $CERT_SECRET_NAME
volumeMounts:
- name: ca-certs
  mountPath: /etc/ssl/certs/ca-certificates.crt
  subPath: ca.crt

# Configura√ß√µes para webhook
webhook:
  volumes:
  - name: ca-certs
    secret:
      secretName: $CERT_SECRET_NAME
  volumeMounts:
  - name: ca-certs
    mountPath: /etc/ssl/certs/ca-certificates.crt
    subPath: ca.crt

# Configura√ß√µes para cainjector
cainjector:
  volumes:
  - name: ca-certs
    secret:
      secretName: $CERT_SECRET_NAME
  volumeMounts:
  - name: ca-certs
    mountPath: /etc/ssl/certs/ca-certificates.crt
    subPath: ca.crt
EOF
  fi
  
  info "Valores para instala√ß√£o configurados em $values_file"
  
  # Executa o comando Helm
  local result=0
  if helm status "$RELEASE" -n "$NS" >/dev/null 2>&1; then
    info "Release existente encontrado. Executando upgrade..."
    helm upgrade "$RELEASE" "$CHART" \
      --namespace "$NS" \
      --version "$CHART_VERSION" \
      --values "$values_file" \
      --timeout "$TIMEOUT" \
      --wait || result=$?
  else
    info "Nenhum release existente. Executando instala√ß√£o..."
    helm install "$RELEASE" "$CHART" \
      --namespace "$NS" \
      --create-namespace \
      --version "$CHART_VERSION" \
      --values "$values_file" \
      --timeout "$TIMEOUT" \
      --wait || result=$?
  fi
  
  # Remove o arquivo tempor√°rio
  rm -f "$values_file"
  
  if [ "$result" -eq 0 ]; then
    info "‚úÖ Deploy/Upgrade do Helm conclu√≠do com sucesso!"
    return 0
  else
    err "‚ùå Deploy/Upgrade do Helm falhou com c√≥digo $result."
    # Exibe recursos criados para diagn√≥stico
    kubectl get all -n "$NS"
    return 1
  fi
}

verify_crds() {
  info "Verificando instala√ß√£o dos CRDs do cert-manager..."
  local crds=("certificates.cert-manager.io" "issuers.cert-manager.io" "clusterissuers.cert-manager.io" "challenges.acme.cert-manager.io")
  
  for crd in "${crds[@]}"; do
    if ! kubectl get crd "$crd" &>/dev/null; then
      warn "CRD $crd n√£o encontrado. Tentando aplicar CRDs manualmente..."
      kubectl apply --validate=false -f "https://github.com/jetstack/cert-manager/releases/$CHART_VERSION/cert-manager.crds.yaml"
      break
    fi
  done
  
  info "‚úÖ CRDs verificados."
}

create_cluster_issuer() {
  info "Criando ClusterIssuer para Let's Encrypt..."
  
  # Criar arquivo tempor√°rio com a configura√ß√£o do ClusterIssuer
  cat > "letsencrypt-certmanager.yaml" <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-certmanager
  namespace: cert-manager
spec:
  acme:
    email: ${EMAIL}
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-certmanager
    solvers:
    - http01:
        ingress:
          class: traefik
EOF
  
  # Aplicar configura√ß√£o
  info "Aplicando configura√ß√£o do ClusterIssuer..."
  retry 5 kubectl apply -f letsencrypt-certmanager.yaml
  
  info "‚úÖ ClusterIssuer criado."
}

verify_installation() {
  info "Verificando instala√ß√£o do cert-manager..."
  
  # Verificar se os pods est√£o rodando
  kubectl get pods -n "$NS" -l app.kubernetes.io/instance="$RELEASE"
  
  # Verificar se o ClusterIssuer est√° pronto
  local issuer_status
  issuer_status=$(kubectl get clusterissuer letsencrypt-certmanager -o jsonpath='{.status.conditions[0].type}' 2>/dev/null || echo "NotFound")
  
  if [[ "$issuer_status" == "Ready" ]]; then
    info "‚úÖ ClusterIssuer est√° pronto."
  else
    warn "ClusterIssuer ainda n√£o est√° pronto. Status: $issuer_status"
    kubectl describe clusterissuer letsencrypt-certmanager
  fi
}

show_summary() {
  info "=================================================="
  info "‚úÖ DEPLOYMENT DO CERT-MANAGER CONCLU√çDO"
  info "=================================================="
  
  info "Vers√£o instalada: $CHART_VERSION"
  info "Namespace: $NS"
  info "Email registrado para Let's Encrypt: $EMAIL"
  
  # Verifica se estamos usando certificados corporativos
  if kubectl -n "$NS" get secret "$CERT_SECRET_NAME" >/dev/null 2>&1; then
    info "üîí Certificados CA corporativos foram adicionados ao cert-manager."
    info "Secret com certificados: $CERT_SECRET_NAME"
  fi
  
  info "Para verificar o status do cert-manager a qualquer momento, execute:"
  info "kubectl get pods -n $NS"
  info ""
  info "Para verificar o ClusterIssuer, execute:"
  info "kubectl describe clusterissuer letsencrypt-certmanager"
  info ""
  info "Para criar um certificado usando este ClusterIssuer, adicione estas anota√ß√µes ao seu Ingress:"
  info "  annotations:"
  info "    cert-manager.io/cluster-issuer: \"letsencrypt-certmanager\""
  info "    kubernetes.io/tls-acme: \"true\""
  info ""
  info "SOLU√á√ÉO DE PROBLEMAS:"
  info "- Se os pods continuarem com falhas, execute com FORCE_REINSTALL=true:"
  info "  FORCE_REINSTALL=true ./deploy-cert-manager.sh"
  info "- Para diagnosticar problemas com certificados:"
  info "  ./diagnose-certificates.sh"
  info "=================================================="
}

# --- Fun√ß√µes de Diagn√≥stico ---
show_diagnostics() {
  info "=== INICIANDO DIAGN√ìSTICO DE PROBLEMAS ==="
  
  # Verifica status da conex√£o com o cluster
  info "Verificando conex√£o com o cluster Kubernetes:"
  kubectl cluster-info 2>&1 | head -2 || true
  
  # Verifica estado do namespace
  info "Verificando estado do namespace $NS:"
  kubectl get ns "$NS" -o yaml 2>/dev/null || echo "Namespace n√£o existe"
  
  # Verifica CRDs do cert-manager
  info "Verificando CRDs do cert-manager:"
  kubectl get crd | grep -E 'cert-manager|certmanager' || echo "Nenhum CRD do cert-manager encontrado"
  
  # Verifica pods no namespace
  info "Verificando recursos no namespace $NS:"
  kubectl get all -n "$NS" || echo "Nenhum recurso encontrado ou namespace n√£o existe"
  
  # Verifica eventos recentes no namespace
  info "Eventos recentes no namespace $NS:"
  kubectl get events -n "$NS" --sort-by='.lastTimestamp' | tail -10 || true
  
  # Verifica vers√µes de Helm e charts utilizados
  info "Vers√£o do Helm:"
  helm version --short || true
  
  info "Reposit√≥rios Helm configurados:"
  helm repo list | grep jetstack || echo "Reposit√≥rio jetstack n√£o encontrado"
  
  info "Verificando release do cert-manager:"
  helm list -n "$NS" || echo "Nenhum release encontrado"
  
  # Verifica recursos espec√≠ficos do cert-manager
  info "Verificando certificados e issuers:"
  kubectl get certificates,issuers,clusterissuers --all-namespaces 2>/dev/null || true
  
  # Verifica configura√ß√£o de rede para o Let's Encrypt
  info "Verificando acesso a servidores ACME do Let's Encrypt:"
  timeout 5 curl -s -o /dev/null -w "%{http_code}" "$LETSENCRYPT_URL" || echo "N√£o foi poss√≠vel conectar ao Let's Encrypt"
  
  info "=== FIM DO DIAGN√ìSTICO ==="
}

# --- Fun√ß√£o Principal ---
main() {
  local status=0
  
  # Verifica requisitos de ferramentas antes de come√ßar
  info "Verificando depend√™ncias de ferramentas..."
  if ! check_command kubectl helm openssl; then
    err "Ferramentas necess√°rias n√£o encontradas. Abortando."
    exit 1
  fi
  
  info "Verificando conex√£o com o cluster Kubernetes..."
  if ! kubectl cluster-info &>/dev/null; then
    err "N√£o foi poss√≠vel conectar ao cluster Kubernetes. Verifique sua configura√ß√£o kubeconfig."
    exit 1
  fi
  
  # Quando FORCE_REINSTALL √© true, primeiro fazemos uma limpeza completa
  if [[ "$FORCE_REINSTALL" == "true" ]]; then
    info "Modo FORCE_REINSTALL ativado: Realizando limpeza completa primeiro..."
    
    # Verifica se o namespace existe e o limpa completamente
    if kubectl get ns "$NS" &>/dev/null; then
      warn "Desinstalando qualquer release existente do cert-manager..."
      if helm list -n "$NS" | grep -q "$RELEASE"; then
        info "Release $RELEASE encontrado, desinstalando..."
        helm uninstall "$RELEASE" -n "$NS" || {
          warn "Erro ao desinstalar helm release. Tentando prosseguir mesmo assim."
        }
      else
        info "Nenhum release helm encontrado no namespace $NS."
      fi
      
      # Remove CRDs relacionados ao cert-manager para evitar "recursos √≥rf√£os"
      warn "Removendo CRDs do cert-manager..."
      kubectl delete crd -l app.kubernetes.io/name=cert-manager 2>/dev/null || true
      sleep 3
      kubectl delete crd -l app.kubernetes.io/instance=cert-manager 2>/dev/null || true
      
      # Agora remove o namespace depois que os CRDs e releases foram removidos
      warn "Removendo namespace $NS para reinstala√ß√£o limpa..."
      kubectl delete ns "$NS" --wait=false
      
      # Espera at√© que o namespace seja totalmente removido
      local timeout=60  # 60 segundos de timeout
      local start_time=$(date +%s)
      while kubectl get ns "$NS" &>/dev/null; do
        local current_time=$(date +%s)
        if (( current_time - start_time > timeout )); then
          warn "Timeout aguardando remo√ß√£o do namespace. Continuando mesmo assim..."
          break
        fi
        info "Aguardando remo√ß√£o do namespace $NS..."
        sleep 5
      done
    else
      # Remove CRDs mesmo se o namespace n√£o existir
      warn "Removendo CRDs do cert-manager..."
      kubectl delete crd -l app.kubernetes.io/name=cert-manager 2>/dev/null || true
      sleep 2
      kubectl delete crd -l app.kubernetes.io/instance=cert-manager 2>/dev/null || true
    fi
    
    # Pausa adicional para garantir que tudo foi limpo
    info "Aguardando para garantir que a limpeza foi conclu√≠da..."
    sleep 5
  fi
  
  # Primeiro configuramos o ambiente b√°sico (namespace, repos)
  info "Configurando ambiente b√°sico..."
  if ! setup_environment; then
    err "Falha ao configurar o ambiente b√°sico."
    exit 1
  fi
  
  # Agora verificamos se estamos em uma rede corporativa com proxy SSL
  info "Verificando configura√ß√£o de rede..."
  if [[ "$SKIP_CERT_CHECK" != "true" ]]; then
    if check_corporate_network; then
      info "Detectada rede corporativa com intercepta√ß√£o SSL."
      if ! create_cert_config; then
        warn "Falha ao extrair certificados corporativos. Continuando mesmo assim, mas pode haver problemas de conex√£o SSL."
      else
        info "Configura√ß√£o de certificados corporativos conclu√≠da com sucesso."
      fi
    else
      info "Rede n√£o parece ter intercepta√ß√£o SSL, continuando normalmente."
    fi
  else
    info "Verifica√ß√£o de certificados corporativos foi desativada (SKIP_CERT_CHECK=true)."
  fi
  
  # Removemos pods em crash antes de tentar uma nova instala√ß√£o
  info "Limpando pods em estado de falha (se houver)..."
  cleanup_crashing_pods
  
  # Agora instalamos o cert-manager (j√° com o namespace e certificados preparados)
  info "Iniciando a instala√ß√£o do cert-manager..."
  
  # Se estamos em um modo de reinstala√ß√£o, adicionamos uma pausa extra
  if [[ "$FORCE_REINSTALL" == "true" ]]; then
    info "Garantindo que o ambiente est√° pronto ap√≥s limpeza..."
    sleep 5
  fi
  
  # Tenta a instala√ß√£o com retries em caso de falha
  local max_attempts=3
  local attempt=1
  local install_success=false
  
  # Loop de tentativas de instala√ß√£o
  while [[ "$attempt" -le "$max_attempts" && "$install_success" != "true" ]]; do
    info "Tentativa $attempt/$max_attempts de instalar o cert-manager..."
    
    if install_cert_manager; then
      install_success=true
      info "Instala√ß√£o do cert-manager conclu√≠da com sucesso!"
    else
      warn "Falha na instala√ß√£o (tentativa $attempt/$max_attempts)"
      
      # Se n√£o for a √∫ltima tentativa, tenta diagnosticar e corrigir problemas
      if [[ "$attempt" -lt "$max_attempts" ]]; then
        warn "Diagnosticando falha e tentando corrigir problemas..."
        
        # Verifica se h√° problemas com secrets
        kubectl get secrets -n "$NS" | grep -q "$CERT_SECRET_NAME" && {
          warn "Secret $CERT_SECRET_NAME j√° existe. Tentando recriar..."
          kubectl delete secret "$CERT_SECRET_NAME" -n "$NS" || true
          
          # Recria os certificados se necess√°rio
          if [[ "$SKIP_CERT_CHECK" != "true" ]] && check_corporate_network; then
            create_cert_config
          fi
        }
        
        warn "Aguardando antes da pr√≥xima tentativa..."
        sleep 10
      fi
      
      attempt=$((attempt + 1))
    fi
  done
  
  # Verifica√ß√£o final ap√≥s todas as tentativas
  if [[ "$install_success" != "true" ]]; then
    err "‚ùå Falha na instala√ß√£o do cert-manager ap√≥s $max_attempts tentativas."
    show_diagnostics
    exit 1
  fi
  
  # Agora que a instala√ß√£o foi bem-sucedida, configura o resto
  info "Verificando pods do cert-manager..."
  if ! wait_for_pods; then
    err "‚ùå Falha ao aguardar pods do cert-manager."
    status=1
  else
    info "‚úÖ Todos os pods do cert-manager est√£o rodando corretamente."
  fi
  
  info "Verificando CRDs do cert-manager..."
  if ! verify_crds; then
    err "‚ùå Falha ao verificar CRDs do cert-manager."
    status=1
  else
    info "‚úÖ CRDs do cert-manager verificados com sucesso."
  fi
  
  info "Criando ClusterIssuer..."
  if ! create_cluster_issuer; then
    err "‚ùå Falha ao criar ClusterIssuer."
    status=1
  else
    info "‚úÖ ClusterIssuer criado com sucesso."
  fi
  
  info "Verificando instala√ß√£o completa..."
  if ! verify_installation; then
    err "‚ùå Falha ao verificar instala√ß√£o."
    status=1
  else
    info "‚úÖ Verifica√ß√£o de instala√ß√£o conclu√≠da com sucesso."
  fi
  
  # Mostra resumo final
  show_summary
  
  # Limpa certificados tempor√°rios
  [[ -d "$TEMP_CERT_DIR" ]] && rm -rf "$TEMP_CERT_DIR"
  
  if [[ "$status" -eq 0 ]]; then
    info "üéâ Instala√ß√£o do cert-manager conclu√≠da com sucesso!"
    return 0
  else
    warn "‚ö†Ô∏è Instala√ß√£o do cert-manager conclu√≠da com alguns avisos ou erros."
    return 1
  fi
}

# --- Ponto de Entrada ---
main "$@"
