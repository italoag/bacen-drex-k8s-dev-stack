apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: firefly
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/italoag/firefly-helm-charts.git
    targetRevision: main
    path: charts/firefly
    helm:
      values: |
        config:
          debugEnabled: true
          adminEnabled: true
          metricsEnabled: true
          preInit: false
          multipartyEnabled: true

          # URLs públicas para que o FireFly retorne endpoints HTTPS corretos
          httpPublicUrl: "https://firefly-multiparty.cluster.eita.cloud"
          adminPublicUrl: "https://firefly-multiparty.cluster.eita.cloud"

          organizationName: "EITA"
          organizationKey: "0x75a99473917701038e854ef6999c76cd947c9f9e"
          
          fireflyContractAddress: "0xDEdB3f6382B73129Ad3f72AD737F348b44Ffc749"
          fireflyContractFirstEvent: 0

          evmconnectUrl: "http://firefly-evmconnect:5000"
          
          # Configurações do ethconnect
          ethconnectTopic: "firefly"
          ethconnectPrefixShort: "fly"
          ethconnectPrefixLong: "firefly"
          ethconnectRetry: true
          ethconnectInstance: "0xDEdB3f6382B73129Ad3f72AD737F348b44Ffc749"
          
          postgresUrl: "postgres://postgres:Bigode%231404%21@postgres-postgresql.database.svc:5432/firefly?sslmode=disable"
          postgresAutomigrate: true

          ipfsApiUrl: "http://ipfs.ipfs.svc:5001"
          ipfsGatewayUrl: "http://ipfs.ipfs.svc:8080"

          addresssResolverUrlTemplate: "http://address-resolver.firefly-os/wallets/{{.Key}}"

        core:
          image:
            repository: ghcr.io/italoag/firefly
            tag: "latest-arm64"
            pullPolicy: IfNotPresent
          
          nodeSelector:
            kubernetes.io/arch: arm64
          
          metrics:
            serviceMonitor:
              enabled: true
          livenessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            failureThreshold: 6
          readinessProbe:
            initialDelaySeconds: 300
            periodSeconds: 10
            failureThreshold: 6
          initContainers: |
              - name: wait-for-dx
                image: busybox:1.36.1
                command: ['sh', '-c', 'until nc -z firefly-dx 5000; do echo waiting for dx; sleep 2; done;']
              - name: create-database
                image: postgres:15
                command: ['sh', '-c']
                args:
                  - |
                    DB_NAME="firefly"
                    USER_NAME="postgres"
                    PSQL_SERVER="postgres://postgres:Bigode%231404%21@postgres-postgresql.database.svc:5432/postgres?sslmode=disable"
                    PSQL_URL="postgres://postgres:Bigode%231404%21@postgres-postgresql.database.svc:5432/firefly?sslmode=disable"
                    
                    echo "Waiting for PostgreSQL server..."
                    until psql "${PSQL_SERVER}" -c "SELECT 1;" > /dev/null 2>&1; do
                      echo "PostgreSQL not ready, waiting..."
                      sleep 2
                    done
                    
                    echo "Checking if database exists..."
                    if ! psql "${PSQL_SERVER}" -c "SELECT datname FROM pg_database WHERE datname = '${DB_NAME}';" | grep -q "${DB_NAME}"; then
                      echo "Database '${DB_NAME}' does not exist; creating."
                      psql "${PSQL_SERVER}" -c "CREATE DATABASE \"${DB_NAME}\" WITH OWNER \"${USER_NAME}\";"
                    else
                      echo "Database '${DB_NAME}' already exists."
                    fi
                    
                    echo "Waiting for database to be available..."
                    until psql "${PSQL_URL}" -c "SELECT 1;" > /dev/null 2>&1; do
                      echo "Database not ready, waiting..."
                      sleep 2
                    done
                    echo "Database is ready!"
          
          jobs:
            postgresMigrations:
              enabled: false

        dataexchange:
          enabled: true
          image:
            repository: ghcr.io/italoag/firefly-dataexchange-https
            tag: "latest-arm64"
            pullPolicy: Always
          certificate:
            enabled: true
            issuerRef:
              kind: ClusterIssuer
              name: selfsigned-ca
          tlsSecret:
            enabled: false

        # Sandbox desabilitado temporariamente devido a health checks hardcoded no Helm chart
        sandbox:
          enabled: false

        signer:
          enabled: true

        evmconnect:
          enabled: true
          image:
            repository: ghcr.io/italoag/firefly-evmconnect
            tag: "latest-arm64"
            pullPolicy: Always
          nodeSelector:
            kubernetes.io/arch: arm64
          config:
            jsonRpcUrl: "http://firefly-signer.firefly.svc:8545"
            policyEngine: |
              policyengine.simple:
                fixedGasPrice: "0"
                resubmitInterval: 5m
                gasOracle:
                  mode: fixed

        erc1155:
          enabled: true
          image:
            repository: ghcr.io/italoag/firefly-tokens-erc1155
            tag: "latest-arm64"
            pullPolicy: Always
          
          nodeSelector:
            kubernetes.io/arch: arm64
          
          config:
            #cethconnectUrl: "http://firefly-gateway-evmconnect:5000"
            ethconnectTopic: "erc1155"

        erc20erc721:
          enabled: true
          image:
            repository: ghcr.io/italoag/firefly-tokens-erc20-erc721
            tag: "latest-arm64"
            pullPolicy: Always
          
          nodeSelector:
            kubernetes.io/arch: arm64
          
          config:
            # ethconnectUrl: "http://firefly-gateway-evmconnect:5000"
            ethconnectTopic: "erc20erc721"

        jobs:
          registration:
            enabled: true
            ffUrl: "http://firefly:5000"
            ffNamespaces:
              - default
  destination:
    server: https://kubernetes.default.svc
    namespace: firefly # Namespace onde o Firefly será implantado
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
