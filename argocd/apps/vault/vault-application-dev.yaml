apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # Nome específico para o ambiente
  name: vault-dev
  namespace: argocd
spec:
  project: default
  destination:
    server: https://kubernetes.default.svc
    # Namespace específico para o ambiente, para isolamento
    namespace: vault-dev
  
  # A fonte dos nossos manifestos é o nosso próprio repositório Git
  source:
    repoURL: https://github.com/seu-usuario/meu-repo-git.git # <-- MUDE PARA O SEU REPO
    # O path aponta para o diretório que contém os hooks e os values
    path: argocd/apps/vault 
    targetRevision: main

    # Configuração do Helm
    helm:
      # O nome do release no Kubernetes
      releaseName: vault
      
      # AQUI ESTÁ A LÓGICA DE SOBREPOSIÇÃO:
      # ArgoCD irá mesclar esses arquivos. 'dev.yaml' sobrescreve 'base.yaml'.
      valuesFiles:
      - values/base.yaml
      - values/dev.yaml
      
      # Precisamos dizer ao ArgoCD onde encontrar o chart do Vault,
      # já que não está no nosso repositório.
      # Para isso, o repo Helm da HashiCorp deve ser adicionado ao ArgoCD.
      # (Se você já fez, não precisa fazer de novo)
      # $ argocd repo add https://helm.releases.hashicorp.com --type helm --name hashicorp
      #
      # (Esta parte é implícita se você usar um Chart.yaml local, mas para
      # usar um chart remoto com values locais, esta é a abordagem)

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true # Garante que o namespace 'vault-dev' seja criado